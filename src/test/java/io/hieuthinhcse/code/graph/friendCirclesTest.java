package io.hieuthinhcse.code.graph;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class friendCirclesTest {

  /***
   * Input:
   * [[1,1,0],
   *  [1,1,0],
   *  [0,0,1]]
   * Output: 2
   */
  @Test
  public void testCase1() {
    var finder = new friendCircles();

    var M = new int[][]{
        {1, 1, 0},
        {1, 1, 0},
        {0, 0, 1}
    };

    assertEquals(2, finder.findCircleNum(M));
  }

  /***
   * Input:
   * [[1,1,0],
   *  [1,1,1],
   *  [0,1,1]]
   * Output: 1
   */
  @Test
  public void testCase2() {
    var finder = new friendCircles();

    var M = new int[][]{
        {1, 1, 0},
        {1, 1, 1},
        {0, 0, 1}
    };

    assertEquals(1, finder.findCircleNum(M));
  }

  /***
   * Input:
   * [[1,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
   * [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
   * [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
   * [0,0,0,1,0,1,1,0,0,0,0,0,0,0,0],
   * [0,0,0,0,1,0,0,0,0,1,1,0,0,0,0],
   * [0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
   * [0,0,0,1,0,0,1,0,1,0,0,0,0,1,0],
   * [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
   * [0,0,0,0,0,0,1,1,1,0,0,0,0,1,0],
   * [0,0,0,0,1,0,0,0,0,1,0,1,0,0,1],
   * [0,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
   * [0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
   * [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
   * [0,0,0,0,0,0,1,0,1,0,0,0,0,1,0],
   * [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1]]
   * Output: 1
   */
  @Test
  public void testCase3() {
    var finder = new friendCircles();

    var M = new int[][]{
//       0 1 2 3 4 5 6 7 8 91011121314
        {1,1,0,0,0,0,0,1,0,0,0,0,0,0,0}, //0
        {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0}, //1
        {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}, //2
        {0,0,0,1,0,1,1,0,0,0,0,0,0,0,0}, //3
        {0,0,0,0,1,0,0,0,0,1,1,0,0,0,0}, //4
        {0,0,0,1,0,1,0,0,0,0,1,0,0,0,0}, //5
        {0,0,0,1,0,0,1,0,1,0,0,0,0,1,0}, //6
        {1,0,0,0,0,0,0,1,1,0,0,0,0,0,0}, //7
        {0,0,0,0,0,0,1,1,1,0,0,0,0,1,0}, //8
        {0,0,0,0,1,0,0,0,0,1,0,1,0,0,1}, //9
        {0,0,0,0,1,1,0,0,0,0,1,1,0,0,0}, //10
        {0,0,0,0,0,0,0,0,0,1,1,1,0,0,0}, //11
        {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0}, //12
        {0,0,0,0,0,0,1,0,1,0,0,0,0,1,0}, //13
        {0,0,0,0,0,0,0,0,0,1,0,0,0,0,1}, //14
    };

    assertEquals(3, finder.findCircleNum(M));
  }

  /***
   * Input:
   * [[1,1,0,0,0,0,0,1,0,0,0,0,0,0,0],
   * [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
   * [0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
   * [0,0,0,1,0,1,1,0,0,0,0,0,0,0,0],
   * [0,0,0,0,1,0,0,0,0,1,1,0,0,0,0],
   * [0,0,0,1,0,1,0,0,0,0,1,0,0,0,0],
   * [0,0,0,1,0,0,1,0,1,0,0,0,0,1,0],
   * [1,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
   * [0,0,0,0,0,0,1,1,1,0,0,0,0,1,0],
   * [0,0,0,0,1,0,0,0,0,1,0,1,0,0,1],
   * [0,0,0,0,1,1,0,0,0,0,1,1,0,0,0],
   * [0,0,0,0,0,0,0,0,0,1,1,1,0,0,0],
   * [0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
   * [0,0,0,0,0,0,1,0,1,0,0,0,0,1,0],
   * [0,0,0,0,0,0,0,0,0,1,0,0,0,0,1]]
   * Output: 1
   */
  @Test
  public void testCase4() {
    var finder = new friendCircles();

    var M = new int[][]{
//       0 1 2 3 4 5 6 7 8 91011121314
        {1,0,0,0,1,1,0,1,0,0,0,1,0,0,0},
        {0,1,0,0,1,0,1,0,0,0,0,0,0,0,0},
        {0,0,1,0,1,0,0,0,0,0,0,0,1,1,0},
        {0,0,0,1,0,0,0,0,0,0,0,1,1,1,0},
        {1,1,1,0,1,0,0,0,0,0,1,0,0,0,0},
        {1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
        {0,1,0,0,0,0,1,0,1,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,1,0,0,0,0,0,1},
        {0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},
        {0,0,0,0,1,0,0,0,0,0,1,0,0,1,0},
        {1,0,0,1,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,1,1,0,0,0,0,0,0,0,1,1,0,0},
        {0,0,1,1,0,0,0,0,0,0,1,0,0,1,0},
        {0,0,0,0,0,0,0,0,1,0,0,0,0,0,1},
    };

    assertEquals(1, finder.findCircleNum(M));
  }
}
